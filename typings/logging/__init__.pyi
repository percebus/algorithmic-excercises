"""
This type stub file was generated by pyright.
"""

import sys
import threading
from collections.abc import Callable, Iterable, Mapping, MutableMapping, Sequence
from io import TextIOWrapper
from re import Pattern
from string import Template
from time import struct_time
from types import FrameType, GenericAlias
from typing import Any, ClassVar, Final, Generic, Protocol, TextIO, TypeVar, overload
from _typeshed import StrPath, SupportsWrite
from typing_extensions import Self, TypeAlias, deprecated

"""
This type stub file was generated by pyright.
"""
if sys.version_info >= (3, 11):
    ...
__all__ = ["BASIC_FORMAT", "BufferingFormatter", "CRITICAL", "DEBUG", "ERROR", "FATAL", "FileHandler", "Filter", "Formatter", "Handler", "INFO", "LogRecord", "Logger", "LoggerAdapter", "NOTSET", "NullHandler", "StreamHandler", "WARN", "WARNING", "addLevelName", "basicConfig", "captureWarnings", "critical", "debug", "disable", "error", "exception", "fatal", "getLevelName", "getLogger", "getLoggerClass", "info", "log", "makeLogRecord", "setLoggerClass", "shutdown", "warning", "getLogRecordFactory", "setLogRecordFactory", "lastResort", "raiseExceptions", "warn"]
if sys.version_info >= (3, 11):
    ...
if sys.version_info >= (3, 12):
    ...
_SysExcInfoType: TypeAlias = ...
_ExcInfoType: TypeAlias = ...
_ArgsType: TypeAlias = ...
_Level: TypeAlias = ...
_FormatStyle: TypeAlias = ...
if sys.version_info >= (3, 12):
    class _SupportsFilter(Protocol):
        def filter(self, record: LogRecord, /) -> bool | LogRecord:
            ...
        
    
    
    _FilterType: TypeAlias = ...
else:
    ...
raiseExceptions: bool
logThreads: bool
logMultiprocessing: bool
logProcesses: bool
_srcfile: str | None
def currentframe() -> FrameType:
    ...

_levelToName: dict[int, str]
_nameToLevel: dict[str, int]
class Filterer:
    filters: list[_FilterType]
    def addFilter(self, filter: _FilterType) -> None:
        ...
    
    def removeFilter(self, filter: _FilterType) -> None:
        ...
    
    if sys.version_info >= (3, 12):
        def filter(self, record: LogRecord) -> bool | LogRecord:
            ...
        
    else:
        ...


class Manager:
    root: RootLogger
    disable: int
    emittedNoHandlerWarning: bool
    loggerDict: dict[str, Logger | PlaceHolder]
    loggerClass: type[Logger] | None
    logRecordFactory: Callable[..., LogRecord] | None
    def __init__(self, rootnode: RootLogger) -> None:
        ...
    
    def getLogger(self, name: str) -> Logger:
        ...
    
    def setLoggerClass(self, klass: type[Logger]) -> None:
        ...
    
    def setLogRecordFactory(self, factory: Callable[..., LogRecord]) -> None:
        ...
    


class Logger(Filterer):
    name: str
    level: int
    parent: Logger | None
    propagate: bool
    handlers: list[Handler]
    disabled: bool
    root: ClassVar[RootLogger]
    manager: Manager
    def __init__(self, name: str, level: _Level = ...) -> None:
        ...
    
    def setLevel(self, level: _Level) -> None:
        ...
    
    def isEnabledFor(self, level: int) -> bool:
        ...
    
    def getEffectiveLevel(self) -> int:
        ...
    
    def getChild(self, suffix: str) -> Self:
        ...
    
    if sys.version_info >= (3, 12):
        def getChildren(self) -> set[Logger]:
            ...
        
    def debug(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    def info(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    def warning(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    @deprecated("Deprecated; use warning() instead.")
    def warn(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    def error(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    def exception(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    def critical(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    def log(self, level: int, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
        ...
    
    fatal = ...
    def addHandler(self, hdlr: Handler) -> None:
        ...
    
    def removeHandler(self, hdlr: Handler) -> None:
        ...
    
    def findCaller(self, stack_info: bool = ..., stacklevel: int = ...) -> tuple[str, int, str, str | None]:
        ...
    
    def handle(self, record: LogRecord) -> None:
        ...
    
    def makeRecord(self, name: str, level: int, fn: str, lno: int, msg: object, args: _ArgsType, exc_info: _SysExcInfoType | None, func: str | None = ..., extra: Mapping[str, object] | None = ..., sinfo: str | None = ...) -> LogRecord:
        ...
    
    def hasHandlers(self) -> bool:
        ...
    
    def callHandlers(self, record: LogRecord) -> None:
        ...
    


CRITICAL: Final = ...
FATAL: Final = ...
ERROR: Final = ...
WARNING: Final = ...
WARN: Final = ...
INFO: Final = ...
DEBUG: Final = ...
NOTSET: Final = ...
class Handler(Filterer):
    level: int
    formatter: Formatter | None
    lock: threading.Lock | None
    name: str | None
    def __init__(self, level: _Level = ...) -> None:
        ...
    
    def get_name(self) -> str:
        ...
    
    def set_name(self, name: str) -> None:
        ...
    
    def createLock(self) -> None:
        ...
    
    def acquire(self) -> None:
        ...
    
    def release(self) -> None:
        ...
    
    def setLevel(self, level: _Level) -> None:
        ...
    
    def setFormatter(self, fmt: Formatter | None) -> None:
        ...
    
    def flush(self) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def handle(self, record: LogRecord) -> bool:
        ...
    
    def handleError(self, record: LogRecord) -> None:
        ...
    
    def format(self, record: LogRecord) -> str:
        ...
    
    def emit(self, record: LogRecord) -> None:
        ...
    


if sys.version_info >= (3, 12):
    def getHandlerByName(name: str) -> Handler | None:
        ...
    
    def getHandlerNames() -> frozenset[str]:
        ...
    
class Formatter:
    converter: Callable[[float | None], struct_time]
    _fmt: str | None
    datefmt: str | None
    _style: PercentStyle
    default_time_format: str
    if sys.version_info >= (3, 9):
        default_msec_format: str | None
        ...
    else:
        ...
    if sys.version_info >= (3, 10):
        def __init__(self, fmt: str | None = ..., datefmt: str | None = ..., style: _FormatStyle = ..., validate: bool = ..., *, defaults: Mapping[str, Any] | None = ...) -> None:
            ...
        
    else:
        ...
    def format(self, record: LogRecord) -> str:
        ...
    
    def formatTime(self, record: LogRecord, datefmt: str | None = ...) -> str:
        ...
    
    def formatException(self, ei: _SysExcInfoType) -> str:
        ...
    
    def formatMessage(self, record: LogRecord) -> str:
        ...
    
    def formatStack(self, stack_info: str) -> str:
        ...
    
    def usesTime(self) -> bool:
        ...
    


class BufferingFormatter:
    linefmt: Formatter
    def __init__(self, linefmt: Formatter | None = ...) -> None:
        ...
    
    def formatHeader(self, records: Sequence[LogRecord]) -> str:
        ...
    
    def formatFooter(self, records: Sequence[LogRecord]) -> str:
        ...
    
    def format(self, records: Sequence[LogRecord]) -> str:
        ...
    


class Filter:
    name: str
    nlen: int
    def __init__(self, name: str = ...) -> None:
        ...
    
    if sys.version_info >= (3, 12):
        def filter(self, record: LogRecord) -> bool | LogRecord:
            ...
        
    else:
        ...


class LogRecord:
    args: _ArgsType | None
    asctime: str
    created: float
    exc_info: _SysExcInfoType | None
    exc_text: str | None
    filename: str
    funcName: str
    levelname: str
    levelno: int
    lineno: int
    module: str
    msecs: float
    message: str
    msg: str | Any
    name: str
    pathname: str
    process: int | None
    processName: str | None
    relativeCreated: float
    stack_info: str | None
    thread: int | None
    threadName: str | None
    if sys.version_info >= (3, 12):
        taskName: str | None
        ...
    def __init__(self, name: str, level: int, pathname: str, lineno: int, msg: object, args: _ArgsType | None, exc_info: _SysExcInfoType | None, func: str | None = ..., sinfo: str | None = ...) -> None:
        ...
    
    def getMessage(self) -> str:
        ...
    
    def __setattr__(self, name: str, value: Any, /) -> None:
        ...
    


_L = TypeVar("_L", bound=Logger | LoggerAdapter[Any])
class LoggerAdapter(Generic[_L]):
    logger: _L
    manager: Manager
    if sys.version_info >= (3, 13):
        ...
    else:
        def __init__(self, logger: _L, extra: Mapping[str, object] | None = ...) -> None:
            ...
        
    if sys.version_info >= (3, 10):
        extra: Mapping[str, object] | None
        ...
    else:
        ...
    def process(self, msg: Any, kwargs: MutableMapping[str, Any]) -> tuple[Any, MutableMapping[str, Any]]:
        ...
    
    def debug(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    def info(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    def warning(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    @deprecated("Deprecated; use warning() instead.")
    def warn(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    def error(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    def exception(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    def critical(self, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    def log(self, level: int, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ..., **kwargs: object) -> None:
        ...
    
    def isEnabledFor(self, level: int) -> bool:
        ...
    
    def getEffectiveLevel(self) -> int:
        ...
    
    def setLevel(self, level: _Level) -> None:
        ...
    
    def hasHandlers(self) -> bool:
        ...
    
    if sys.version_info >= (3, 11):
        ...
    else:
        ...
    @property
    def name(self) -> str:
        ...
    
    if sys.version_info >= (3, 11):
        def __class_getitem__(cls, item: Any, /) -> GenericAlias:
            ...
        


def getLogger(name: str | None = ...) -> Logger:
    ...

def getLoggerClass() -> type[Logger]:
    ...

def getLogRecordFactory() -> Callable[..., LogRecord]:
    ...

def debug(msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

def info(msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

def warning(msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

@deprecated("Deprecated; use warning() instead.")
def warn(msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

def error(msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

def critical(msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

def exception(msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

def log(level: int, msg: object, *args: object, exc_info: _ExcInfoType = ..., stack_info: bool = ..., stacklevel: int = ..., extra: Mapping[str, object] | None = ...) -> None:
    ...

fatal = ...
def disable(level: int = ...) -> None:
    ...

def addLevelName(level: int, levelName: str) -> None:
    ...

@overload
def getLevelName(level: int) -> str:
    ...

@overload
@deprecated("The str -> int case is considered a mistake.")
def getLevelName(level: str) -> Any:
    ...

if sys.version_info >= (3, 11):
    def getLevelNamesMapping() -> dict[str, int]:
        ...
    
def makeLogRecord(dict: Mapping[str, object]) -> LogRecord:
    ...

if sys.version_info >= (3, 9):
    def basicConfig(*, filename: StrPath | None = ..., filemode: str = ..., format: str = ..., datefmt: str | None = ..., style: _FormatStyle = ..., level: _Level | None = ..., stream: SupportsWrite[str] | None = ..., handlers: Iterable[Handler] | None = ..., force: bool | None = ..., encoding: str | None = ..., errors: str | None = ...) -> None:
        ...
    
else:
    ...
def shutdown(handlerList: Sequence[Any] = ...) -> None:
    ...

def setLoggerClass(klass: type[Logger]) -> None:
    ...

def captureWarnings(capture: bool) -> None:
    ...

def setLogRecordFactory(factory: Callable[..., LogRecord]) -> None:
    ...

lastResort: Handler | None
_StreamT = TypeVar("_StreamT", bound=SupportsWrite[str])
class StreamHandler(Handler, Generic[_StreamT]):
    stream: _StreamT
    terminator: str
    @overload
    def __init__(self: StreamHandler[TextIO], stream: None = ...) -> None:
        ...
    
    @overload
    def __init__(self: StreamHandler[_StreamT], stream: _StreamT) -> None:
        ...
    
    def setStream(self, stream: _StreamT) -> _StreamT | None:
        ...
    
    if sys.version_info >= (3, 11):
        def __class_getitem__(cls, item: Any, /) -> GenericAlias:
            ...
        


class FileHandler(StreamHandler[TextIOWrapper]):
    baseFilename: str
    mode: str
    encoding: str | None
    delay: bool
    if sys.version_info >= (3, 9):
        errors: str | None
        def __init__(self, filename: StrPath, mode: str = ..., encoding: str | None = ..., delay: bool = ..., errors: str | None = ...) -> None:
            ...
        
    else:
        ...


class NullHandler(Handler):
    ...


class PlaceHolder:
    loggerMap: dict[Logger, None]
    def __init__(self, alogger: Logger) -> None:
        ...
    
    def append(self, alogger: Logger) -> None:
        ...
    


class RootLogger(Logger):
    def __init__(self, level: int) -> None:
        ...
    


root: RootLogger
class PercentStyle:
    default_format: str
    asctime_format: str
    asctime_search: str
    validation_pattern: Pattern[str]
    _fmt: str
    if sys.version_info >= (3, 10):
        def __init__(self, fmt: str, *, defaults: Mapping[str, Any] | None = ...) -> None:
            ...
        
    else:
        ...
    def usesTime(self) -> bool:
        ...
    
    def validate(self) -> None:
        ...
    
    def format(self, record: Any) -> str:
        ...
    


class StrFormatStyle(PercentStyle):
    fmt_spec: Pattern[str]
    field_spec: Pattern[str]
    ...


class StringTemplateStyle(PercentStyle):
    _tpl: Template
    ...


_STYLES: Final[dict[str, tuple[PercentStyle, str]]]
BASIC_FORMAT: Final[str]
