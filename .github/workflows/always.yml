name: "[C]ontinuous [I]ntegration"
on:
  push:

env:
  ARCHITECTURE: x64
  NODE_VERSION: 20.x
  PYTHON_VERSION: 3.12.1
  DOCKER_BUILDKIT: 1
  PYRIGHT_PYTHON_FORCE_VERSION: latest

permissions:
  checks: write
  pull-requests: write

jobs:
  verify:
    name: Verify
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: ls
        run: ls -la

      - name: setup python @ ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          architecture: ${{ env.ARCHITECTURE }}
          python-version: ${{ env.PYTHON_VERSION }}
      - name: pip install
        run: bash scripts/pip/install.ba.sh

      - name: setup node @ ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: npm run setup:ci
        run: npm run setup:ci --if-present
      - name: npm install
        run: npm ci

      - name: lint
        run: pypyr lint

      - name: test
        run: pypyr ci lint=False

      - name: Publish test-results.xml Summary
        if: always()
        uses: pmeier/pytest-results-action@main
        with:
          path: test-results.xml
          summary: true
          display-options: fEX
          fail-on-empty: true
          title: Test results

      - name: Publish test-results.xml
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            test-results.xml

  docker_compose:
    name: docker compose
    needs: verify
    # if: github.ref == 'refs/heads/main' # TODO?
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: docker compose up
        run: docker-compose up --abort-on-container-exit

  docker_build_matrix:
    name: docker build --target
    needs: docker_compose
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    strategy:
      max-parallel: 10
      matrix:
        DOCKER_TARGET:
          # - base
          # - project
          # - dev
          - test

          # docker-compose tests this
          # - release

    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: "docker build: ${{ matrix.DOCKER_TARGET }}"
        run: docker build . --target ${{ matrix.DOCKER_TARGET }}

  verify_matrix:
    name: Verify Matrix
    needs: verify
    if: github.ref == 'refs/heads/main'
    continue-on-error: true
    strategy:
      max-parallel: 10
      matrix:
        # Different OS
        OS:
          - ubuntu-latest
          - windows-latest

        # Past/Future versions
        PYTHON_VERSION:
          # - 3.11 # poetry is not setup
          - 3.12.x # latest 3.12.x
          # - 3.13 # "The version '3.13' with architecture 'x64' was not found for Ubuntu 22.04."

        # Future versions
        NODE_VERSION: [21.x, 22.x]

        # Different architectures
        ARCHITECTURE:
          - x64
          # - arm64 # "The version '3.12.x' with architecture 'arm64' was not found for Ubuntu 22.04."

    runs-on: ${{ matrix.OS }}
    steps:
      # FIXME: Does NOT work on Windows
      # - run: echo ${{ github.job }}
      # - run: |
      #     JOB_NAME="OS:${{ matrix.os }}, python@${{ matrix.PYTHON_VERSION }}, node@${{ matrix.NODE_VERSION }}, ${{ matrix.ARCHITECTURE }}"
      #     echo $JOB_NAME
      #     echo "JOB_NAME=$JOB_NAME" >> $GITHUB_ENV
      # - name: echo JOB_NAME
      #   run: |
      #     echo "JOB_NAME: ${{ env.JOB_NAME }}"

      - name: checkout
        uses: actions/checkout@v4
      - name: ls
        run: ls

      - name: setup python @ ${{ matrix.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          architecture: ${{ matrix.ARCHITECTURE }}
          python-version: ${{ matrix.PYTHON_VERSION }}
      - name: pip install
        run: bash scripts/pip/install.ba.sh

      - name: setup node @ ${{ matrix.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.NODE_VERSION }}
      - name: npm run setup:ci
        run: npm run setup:ci --if-present
      - name: npm install
        run: npm ci

      # FIXME prettier fails on windows
      # Because of EOL differences
      # Thus, we disabled 'npm'
      - name: test
        run: pypyr ci npm=False
